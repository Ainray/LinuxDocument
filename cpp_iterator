template<typename InputIterator, typename T>
InputIterator find(InputIterator first, InputIterator last, const T &value)
{
    while (first != last && *frist != value)
        ++first;
    return first;
}
#include <iostream>
#include <vector>
#include <list>
#include <algorithm>
using namespace std;

int main(int argc, const char *argv[])
{
    int arr[5] = { 1, 2, 3, 4, 5};

    vector<int> iVec(arr, arr + 5);
    list<int> iList(arr, arr + 5);

    
    vector<int>::iterator iter1 = find(iVec.begin(), iVec.end(), 3);
    if (iter1 == iVec.end())
        cout<<"3 not found"<<endl;
    else
        cout<<"3 found"<<endl;

    
    list<int>::iterator iter2 = find(iList.begin(), iList.end(), 4);
    if (iter2 == iList.end())
        cout<<"4 not found"<<endl;
    else
        cout<<"4 found"<<endl;

    return 0;
}
#include <vector>
using namespace std;

int main(int argc, const char *argv[]) {
    int arr[5] = { 1, 2, 3, 4, 5 };

    vector<int> iVec(arr, arr + 5); 



    
    for (vector<int>::iterator it = iVec.begin();it != iVec.end();) {
        it = iVec.erase(it);
    }
    return 0;
}
 #include <iostream>

 template<typename T>
 struct ListNode {
     T value;
     ListNode* next;
     ListNode() {
         next = 0;
     }
     ListNode(T val, ListNode *p = nullptr) :
             value(val), next(p) {
     }
 };

 template<typename T>
 class List {
 private:
     ListNode<T> *m_pHead;
     ListNode<T> *m_pTail;
     int m_nSize;
 public:
     List() {
         m_pHead = nullptr;
         m_pTail = nullptr;
         m_nSize = 0;
     }
     
     void push_back(T value) {
         if (m_pHead == nullptr) {
             m_pHead = new ListNode<T>(value);
             m_pTail = m_pHead;
         } else {
             m_pTail->next = new ListNode<T>(value);
             m_pTail = m_pTail->next;
         }

     }

     
     void print(std::ostream &os = std::cout) const {
         for (ListNode<T> *ptr = m_pHead; ptr != m_pTail->next ; ptr = ptr->next)
             std::cout << ptr->value << " ";
         os << std::endl;
     }

     
     class iterator {
     private:
         ListNode<T> *m_ptr;
     public:
         iterator(ListNode<T>* p = nullptr) :
                 m_ptr(p) {
         }

         T operator*() const {
             return m_ptr->value;
         }
         ListNode<T>* operator->() const {
             return m_ptr;
         }
         iterator& operator++() {
             m_ptr = m_ptr->next;
             return *this;
         }
         iterator operator++(int) {
             ListNode<T>* tmp = m_ptr;
             m_ptr = m_ptr->next;
             return iterator(tmp);
         }

         bool operator==(const iterator &arg) const {
             return arg.m_ptr == this->m_ptr;
         }

         bool operator!=(const iterator &arg) const {
             return arg.m_ptr != this->m_ptr;
         }

     };

     
     iterator begin() const {
         return iterator(m_pHead);
     }

     
     iterator end() const {
         return iterator(m_pTail->next);
     }

     

 };

 int main() {
     List<int> l;
     l.push_back(1);
     l.push_back(2);
     l.print();
     for (List<int>::iterator it = l.begin(); it != l.end(); ++it) {
         std::cout << *it << " ";
     }
     std::cout << std::endl;
     return 0;
 }
