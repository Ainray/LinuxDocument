update to bullseye::
    cannot run,
        https://www.cnblogs.com/zero-vic/p/11584437.html
    run by one of these three methods,
        + check vmware version by,
            vmware -v
        + check kernal version by,
            uname -r
        it gives 15.5.5
        + first git by 
            git clone git@github.com:mkubecek/vmware-host-modules.git
        + checkout into 15.5.5 version by
            git checkout w15.5.5-k5.10
        + make by
            make -j 4 'VM_UNAME=$(uname -r)'
        + install by
            sudo make install
        + restart by 
            sudo service vmware restart
        + run vmware by one the these three methods, by
            . replace /usr/bin/vmware-modconfig by a link to /bin/true
            . edit /usr/bin/vmware (or /usr/bin/vmplayer) so that it does not run vmware-modconfig
            . run /usr/lib/vmware/bin/vmware directly without the wrapper script
        I use the third one, and create a alias by in ~/.bash_alias
             alias vmware='/usr/lib/vmware/bin/vmware'
        + now can run VMware by
            vmware

no 3d support::
   check host,
        glxinfo |egrep -i direct 
   gives yes

   configuration
        ~/.vmware/preferences
   append in the last line
        mks.gl.allowBlacklistedDrivers = "TRUE"

   also configure environment
        export MESA_GL_VERSION_OVERRIDE=3.3

   check verion by 
        opengl_version

   boot/reboot

   check version in windows guest
        opengl extension viewer
   
opengl_version::
    
    ------------------
#include <stdio.h>
#include <GL/glut.h>

int main(int argc, char** argv)
{
    glutInit(&argc,argv);
    //显示模式初始化
    glutInitDisplayMode(GLUT_SINGLE|GLUT_RGB|GLUT_DEPTH);
    //定义窗口大小
    glutInitWindowSize(300,300);
    //定义窗口位置
    glutInitWindowPosition(100,100);
    //创建窗口
    glutCreateWindow("OpenGL Version");
    const GLubyte* name = glGetString(GL_VENDOR); //返回负责当前OpenGL实现厂商的名字
    const GLubyte* biaoshifu = glGetString(GL_RENDERER); //返回一个渲染器标识符，通常是个硬件平台
    const GLubyte* OpenGLVersion =glGetString(GL_VERSION); //返回当前OpenGL实现的版本号
    const GLubyte* gluVersion= gluGetString(GLU_VERSION); //返回当前GLU工具库版本
    printf("OpenGL实现厂商的名字：%s\n", name);
    printf("渲染器标识符：%s\n", biaoshifu);
    printf("OOpenGL实现的版本号：%s\n",OpenGLVersion );
    printf("OGLU工具库版本：%s\n", gluVersion);
    return 0;
}
    ------------------

    compile by 
        g++ -o opengl_version opengl_version.c -lGL -lglut -lGLU
