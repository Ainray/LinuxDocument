Invoking::
            invocation of a script by,
                
                python3 myscript.py

            #(shebang) line as the first program 

                #!/usr/bin/env python3
        or
                #!/usr/bin/python3

IDE in vim configuration:
    
        ~/.vim/after/ftplugin/python.vim for python tap and indent

              set tabstop=4
              set softtabstop=4
              set shiftwidth=4
              set textwidth=79
              set expandtab
              set autoindent
              set fileformat=unix

        better indent by

            git clone git@github.com:vim-scripts/indentpython.vim

        autocompletion for python by
            cd ~/.vim/bundle/
            git clone git@github.com:Valloric/YouCompleteMe
            cd YouCompleteMe
            git submodule update --init --recursive
            ./install.py --clang-completer

        color scheme for

            wget https://vim.sourceforge.io/scripts/download_script.php?src_id=2538 -O python.vim
            mv python.vim ~/.vim/after/colors/

        syntax check and highlighting
            install flake-8 for PEP8
            
                sudo python3 -mpip install flake8
                git clone git@github.com:nvie/vim-flake8.git

            run flake8-check, assume any of g:flake8_show_in_gutter or g:flake8_show_in_file are set to 1,
                
                call flake8#Flake8UnplaceMarkers()
                
        to remove all markers

            remap key for flake8-checking instead of using default <F7> by
            
                autocmd FileType python map <buffer> <F3> :call Flake8()<CR>

        in ~/.vimrc, or by

                noremap <buffer> <F3> :call Flake8()<CR> 

        in ~/.vim/after/ftplugin/python.vim, or automatically check when
        writing by 

                autocmd BufWritePost *.py call Flake8()

        in ~/.vimrc
                
                
array::
numpy::
ndarray::
        numpy.ndarray
            arr=numpy.linspace(0.001,0.06,101)
        get size by
            np.size(arr, 0)
            [m,n]=arr.shape
        tranpose by
            np.transpose(arr)
        multiply by
            y=np.multiply(x,2)

array::
concatenate::
    x1 = np.repeat(1,7)
    x2 = np.array([1, 2, 3, 4, 5, 6, 7, 8])
    A = np.concatenate([x1,x2])

ndarray::
        >>>type(imhs1)
        <type 'numpy.ndarray'
        
        >>>imhs1.shape
        (10001,5)
        >>>imhs1[1,1]
        >>>imhs1[1,]
        >>>imhs1[:,1]
string::
            Define multiple-line string by,
                error = """
            Hello, world.
            Just a test.
            """
comment::
    block comment,
        """
            <comments>
        """

    single-line comment
        # <comment>

dict::
    definition,

            inp2=dict(src=[0,0,0.001], rec=[1000,0,0.001],
                  depth=[0,500,525],res=[2e14,20,500,20],
                  freqtime=t,verb=1
            )
        or,

            inp2={'src':[0,0,0.001], 'rec': [1000,0,0.001],
                  'depth':[0,500,525],'res':[2e14,20,500,20],
                  'freqtime': t,'verb':1
            }
    

    indexing,
            
            inp1['depth']=inp2['depth'][0]
if::
    syntax
        
            if condition:
                <IndentedStatementBlock>

            if condition:
                <IndentedStatementBlock>
            else:
                <IndentedStatementBlock>

            if condition:
                <IndentedStatementBlock>
            elif
                <IndentedStatementBlock>
            else:
                <IndentedStatementBlock>

            # if stuctrue can be nested

lexical::
            Comments starts with a hash (#) and ends at a EOL.
        If a comment in the first or second line of python script matches the regular expression

                                coding[=:]\s*([-\w.]+)
        For example,
                        # -*- coding: utf-8 -*-

        Lexical analyzer break a python program(file) into tokens, which are read by a parser.

        A python program -> logical lines
        
line concatenation::
long line::
line continuation::
        A logical line ends by NEWLINE token, which maybe contain multiple physical lines ending
    with EOL(LF or CR LF or CR). Explicit line joining uses backslash "\", Expressions in parentheses,
    square brackets or curly braces can be split over more than one physical line without using "\".
        

list::
    definition,
    
        [a,b,c]
        list(range(500,2000,100))

    indexing,

            s[i], ith item of s, origin 0
            s[i:j], slice of s from i to j 
            s[i:j:k], slice of s from i to j with step 2 
        NOTE: i, j can be negative, relative to the end of s
              for s[i:j], if i is omitted or None, use 0, if j is omitted, or None use len(s), if i>=j, empty
              for s[i:j:k], index x=i+n*k, 0<=n<(j-i)/k, thus x=i,i+k,...,<j always.
    insert,
            x=[2,3,4]
            x.insert(0,1) # return none, x is changed
              
module::
        A module is a script including definitions of functions as well as executable statements. These
    statements only are executed the first time the module name is encountered in an import statement.
    They are also executed if the file executed as a script.  Each module has its own private symbol
    table, which is used as global symbol table by all functions defined in the module.

        import a module,

            import foo
            foo.bar()

            from foo import bar
            bar()
            # in this case, the module name "foo" is not introduced

            from foo import *
            # imports all names execept those beginning with an underscore(_).
       
            >>> reload(foo) 
            # a module is import only once per interpreter session, so if you change your modules,
            # you must restart the interpreter -or, reload it.

        execute a module as scripts

            python foo.py <arguments>

            # because the code in the module will executed, just as if you imported it, but with 
            # __name__ is set to __main__, then by adding this code at the end of your module

            if __name== "__main__"
                import sys
                bar(int(sys.argv[1]))
                
            # you can make a file usable as an importable module or as a script, because the code
            # that parses the command line only run if the module is executed as the "main" file.
            # If you import it as a module, it's code will not be run.

        module search path
            * interpreter first searches for a built-in module with that name, e.g. "foo", 
            * if not found, it then searches for a file named foo.py in a list of directories
              given by the varialbe sys.path
              sys.path is initialized from these locations:
                +   current directory
                +   PYTHONPATH
                +   the installation-dependent default
                +   python programs can modify it after initialization

        list the names of functions and variables
            dir()
            dir(foo)
            dir(sys)
            dir(__buildins__)

environment variables::
            get environment variables
                os.environ.get('HOME')

        
scopes::
            # ~/.bash/python_test_scope
            # -------------------------------------------------
                #!/usr/bin/env python3
                def scope_test():
                        def do_local():
                            spam = "local spam"

                        def do_nonlocal():
                            nonlocal spam
                            spam = "nonlocal spam"

                        def do_global():
                            global spam
                            spam = "global spam"

                        spam = "test spam"
                        print("Initialization to:", spam)
                        do_local()
                        print("After local assignment:", spam)
                        do_nonlocal()
                        print("After nonlocal assignment:", spam)
                        do_global()
                        print("After global assignment:", spam)

                scope_test()
                print("In global scope:", spam)
            # -------------------------------------------------
class::
            Definition by
                class <ClassName>:
                    <Statement-1>
                    .
                    .
                    .
                    <Statement-2>
            Example,
                class MyClass:
                    """A simple example class"""
                    i=12345

                    def f(self)
                        return 'hello world'

        Then, valid attribute references are
            
                MyClass.i
                MyClass.f
                MyClass.__doc__

            Instantiation by

                x = MyClass()

            Initialization method by,
                
                    det __init__(self)
                    self.i=1325

            Instance objects can be classified into data objects and method
        objects (which corresponds to function objects of class. ) Method 
        object can be stored away and called a later time, for example,
                    xf=x.f
                    while True:
                        print(xf())

            Self argument, call of x.f() is exactly equivalent to MyClass.f(x).
        That is, when method object is called, the instance object is passed as
        the first argument of the class function implicitly.


            Class and instance variables
                class Dog:
                    kind = 'canine'         # class variable shared by all instances

                    def __init__(self, name):
                        self.name = name    # instance variable unique to each instance

                >>> d = Dog('Fido')
                >>> e = Dog('Buddy')
                >>> d.kind
                'canine'
                >>> e.kind
                'canine'
                >>> d.name
                'Fido'
                >>> e.name
                'Buddy'


            Data attributes will override method attributes with the same names. To avoid
        accidental name conflicts, conventionally, capitalizing Method names, prefixing
        data attribute names with a small string(perhaps an underscore), or using verbs 
        for methods and nouns for data attributes.

            Function object can defined outside class definition block, for example,
                def f1(self, x, y)
                    return min(x, x+y)

                class C:
                    f = f1

                    def g(self)
                        return 'hello world'

                    h=g # not recommended although allowed
        Now f, h, and g are all attributes of C.

            Inheritance by
                class <DerivedClassName>(<BaseClassName1, Base2, Base3>):
                    <Statement-1>
                    .
                    .
                    .
                    <Statement-n>
                    
tuple::
    
symbol::
integrate::
    integrate by,

        from sympy import *
        from sympy.abc import *
        integrate(exp(-t),(t,0,oo))
        integrate(r*2*(r*r+a*a)**(-2.5),(r,0,b))
fft::
fourier::

ipython::
    zoom in and out by
        ctrl+shift+"+", ctrl+"-"

    list variables
        whos
        who

    run script by
        run main.py

    edit script by
        edit main.py

    debug script by
        run -d main.p

    debug command

matrix::
linear::
linear equation::
    AT=np.array([1, 1, 1, 1, 1, 1, 1, -3, -2, -1, 0, 1, 2, 3, 9, 4, 1, 0, 1, 4, 9]).reshape(3,7)
    A=np.transpose(A)
    ATA=np.matmul(AT,A)
    b=np.array([4,2,3,0,-1,-2,-5])
    bt=np.matmul(AT,b)
    x=np.linalg.solve(ATA,bt)

            
codecheck::
    W401,  # noqa
    

h5py::
hdf5::
    is_hdf5
    
python3 -mpip list
