<HTML>
<HEAD>
<!-- $MVD$:fontset("Courier New","Courier New") -->
 <TITLE>Using Visual C++ DLLs with C++Builder</TITLE>

 <SCRIPT LANGUAGE="JavaScript" TITLE="BSSC Special Effects" SRC="bsscdhtm.js">
 </SCRIPT>
</HEAD>
<BODY style="font-family:'Arial'; font-size:10pt;  background-color:white;" bgcolor="white">
<P align="left"  style="margin-top:0.00pt;margin-bottom:0.00pt;text-align:left;line-height:30.00pt;" ><SPAN face="Times Roman"  style="font-family:'Times Roman'; font-size:24pt; letter-spacing:-0.50pt;" >Using Visual C++ DLLs with C++Builder</SPAN></P>
<P align="left"  style="margin-left:5.75pt;margin-right:6.50pt;margin-top:4.00pt;margin-bottom:6.00pt;text-align:left;" ><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " >by Harold Howe</SPAN></P>
<P align="left"  style="margin-left:5.75pt;margin-right:6.50pt;margin-top:4.00pt;margin-bottom:0.00pt;text-align:left;" ><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " >It is possible that one day your boss will ask you if you can create an application with C++Builder that interfaces to an existing </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >DLL</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > compiled with Microsoft Visual C++. Often, the original </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >DLL</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > source code won’t be available to you; either because the </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >DLL</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > comes from a third party vendor, or because your new intern just deleted the </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >\DLL\SRC</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > directory from the network. This article shows you how to call a </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >DLL</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > built with Visual C++ from your C++Builder project given only a </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >DLL</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > and a header file.</SPAN></P>
<P align="left"  style="margin-left:5.75pt;margin-right:6.50pt;margin-top:4.00pt;margin-bottom:0.00pt;text-align:left;" >&nbsp;</P>
<P align="left"  style="margin-left:5.75pt;margin-top:4.00pt;margin-bottom:2.00pt;text-align:left;" ><SPAN face="Arial"  style="font-family:'Arial'; font-size:14pt; letter-spacing:0.25pt;" >Calling DLL functions from a C++Builder project </SPAN></P>
<P align="left"  style="margin-left:5.75pt;margin-right:6.50pt;margin-top:4.00pt;margin-bottom:0.00pt;text-align:left;" ><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " >Calling a </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >DLL</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > that was created with Visual C++ presents some unique challenges. Before I explain how to use </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >DLL</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " >s generated by Visual C++, it may be beneficial to review how you call functions in a </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >DLL</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > that was created with C++Builder. A </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >DLL</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > that was created with C++Builder presents fewer roadblocks than one that was built with Visual C++. </SPAN></P>
<P align="left"  style="margin-left:5.75pt;margin-right:6.50pt;margin-top:4.00pt;margin-bottom:0.00pt;text-align:left;" ><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " >You need to gather three ingredients in order to call a </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >DLL</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > function from your C++Builder program: the </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >DLL</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > itself, a header file with function prototypes, and an import library. (You could load the library at run time instead of using an import library, but we will stick to the import library method for simplicity.) To call a function in a </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >DLL</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " >, you first add the import library to your C++Builder project by selecting the Project | Add To Project from the main menu. The import library is created for you automatically when you build a </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >DLL</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > project with C++Builder. Next, insert a </SPAN><SPAN face="Courier"  style="font-family:'Courier'; font-size:9pt; " >#include</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > statement for the </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >DLL</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > header file in the C++ source file that needs to call one of the </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >DLL</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > functions. Finally, add the code that calls the </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >DLL</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > function. </SPAN></P>
<P align="left"  style="margin-left:5.75pt;margin-right:6.50pt;margin-top:4.00pt;margin-bottom:0.00pt;text-align:left;" ><B><SPAN face="Arial" color=fuchsia  style="font-family:'Arial'; font-size:10pt; color:fuchsia; font-weight:bold; " >Listings A</SPAN></B><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > and </SPAN><B><SPAN face="Arial" color=fuchsia  style="font-family:'Arial'; font-size:10pt; color:fuchsia; font-weight:bold; " >B</SPAN></B><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > contain source code for a simple </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >DLL</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > that that you can use for testing. Notice that the test code implements two different calling conventions: standard call (represented by the </SPAN><SPAN face="Courier"  style="font-family:'Courier'; font-size:9pt; " >__stdcall</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > keyword) and the C calling convention (</SPAN><SPAN face="Courier"  style="font-family:'Courier'; font-size:9pt; " >__cdecl</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " >). I did this for a very good reason: when you try to call a </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >DLL</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > that was compiled with Visual C++, most of your headaches will result from problems that arise due to mismatched calling conventions. Also notice that one function does not explicitly list the calling convention that it uses. This unknown function will act as a measuring stick for </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >DLL</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > functions that don’t specifically declare a calling convention. </SPAN></P>
<P align="left"  style="margin-left:5.75pt;margin-right:6.50pt;margin-top:4.00pt;margin-bottom:0.00pt;text-align:left;" ><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " >To build the test </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >DLL</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " >, first create a new </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >DLL</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > project from the Object Repository. (Alternatively, you can download the project from the Bridges Publishing Web site.) C++Builder now shows the source for the </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >DLL</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " >. At this point, the source contains just a </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >DLL</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > entry point function and some include statements. Create a new unit and save it as </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >DLL.CPP</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " >. Enter the code from </SPAN><B><SPAN face="Arial" color=fuchsia  style="font-family:'Arial'; font-size:10pt; color:fuchsia; font-weight:bold; " >Listing A</SPAN></B><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > and insert it into the </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >DLL.H</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > header. Next switch to </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >DLL.CPP</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > file and enter the code from </SPAN><B><SPAN face="Arial" color=fuchsia  style="font-family:'Arial'; font-size:10pt; color:fuchsia; font-weight:bold; " >Listing B</SPAN></B><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " >. Make sure that the </SPAN><SPAN face="Courier"  style="font-family:'Courier'; font-size:9pt; " >#define</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > for </SPAN><SPAN face="Courier"  style="font-family:'Courier'; font-size:9pt; " >_BUILD_DLL_</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > is placed above the include statement for </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >DLL.H</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " >. </SPAN></P>
<P align="left"  style="margin-left:5.75pt;margin-right:6.50pt;margin-top:4.00pt;margin-bottom:0.00pt;text-align:left;" ><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " >Save the project as </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >BCBDLL.BPR</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " >. Next, compile the project and take a look at the files produced. C++Builder generates both a </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >DLL</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > and an import library with a </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >.LIB</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > extension. </SPAN></P>
<P align="left"  style="margin-left:5.75pt;margin-right:6.50pt;margin-top:4.00pt;margin-bottom:0.00pt;text-align:left;" ><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " >At this point, you have the three ingredients needed to call functions in the </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >DLL</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > from a C++Builder project. Next, you need to create a C++Builder project that will try to call the </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >DLL</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > functions. Create a new project in C++Builder and save it to your hard drive. Copy the </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >DLL</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " >, the import library, and the </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >DLL.H</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > header file from the </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >DLL</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > project’s folder to the folder containing the test </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >EXE </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " >project. Select Project | Add To Project from the C++Builder main menu and add </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >BDCBDLL.LIB</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > to the project. Next, add a </SPAN><SPAN face="Courier"  style="font-family:'Courier'; font-size:9pt; " >#include</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > statement in the main unit that includes </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >DLL.H</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " >. Finally, add code that calls the </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >DLL</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > functions. </SPAN><B><SPAN face="Arial" color=fuchsia  style="font-family:'Arial'; font-size:10pt; color:fuchsia; font-weight:bold; " >Listing C</SPAN></B><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > shows code that calls each of the </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >DLL</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " >’s functions. You should find that all is well and that the test application can call functions in the </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >DLL</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > without problems.</SPAN></P>
<P align="left"  style="margin-left:5.75pt;margin-right:6.50pt;margin-top:4.00pt;margin-bottom:0.00pt;text-align:left;" >&nbsp;</P>
<P align="left"  style="margin-left:5.75pt;margin-top:4.00pt;margin-bottom:2.00pt;text-align:left;" ><SPAN face="Arial"  style="font-family:'Arial'; font-size:14pt; letter-spacing:0.25pt;" >The problem with Visual C++ DLLs </SPAN></P>
<P align="left"  style="margin-left:5.75pt;margin-right:6.50pt;margin-top:4.00pt;margin-bottom:0.00pt;text-align:left;" ><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " >In an ideal world, calling a </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >DLL</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > created with Visual C++ would be no more difficult than calling a </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >DLL</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > built with C++Builder. Unfortunately, Borland and Microsoft disagree on three primary technical points when it comes to </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >DLL</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " >s. First, Borland and Microsoft use different object file formats (this affects objs and import library files). Visual C++ uses the </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >COFF</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > library format while Borland uses </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >OMF</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " >. This means that you can’t add a Microsoft generated import library to a C++Builder project. Thanks to the Borland </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >IMPLIB </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " >utility, the file format differences are easily remedied.</SPAN></P>
<P align="left"  style="margin-left:5.75pt;margin-right:6.50pt;margin-top:4.00pt;margin-bottom:0.00pt;text-align:left;" ><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " >Second, the two products disagree on linker naming conventions. This turns out to be the primary hurdle when trying to call a Visual C++ </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >DLL</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > from C++Builder. Every function in a </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >DLL</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > or </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >OBJ </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " >has a linker name. The linker uses the linker name to resolve functions that were prototyped at compile time. The linker will generate an unresolved external error if it can’t find a function with a linker name that it thinks is needed by the program.</SPAN></P>
<P align="left"  style="margin-left:5.75pt;margin-right:6.50pt;margin-top:4.00pt;margin-bottom:0.00pt;text-align:left;" ><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " >With regard to linker function names, Borland and Microsoft disagree on these points: </SPAN></P>
<P align="left"  style="margin-left:5.75pt;margin-right:6.50pt;margin-top:4.00pt;margin-bottom:0.00pt;text-align:left;" >&nbsp;</P>
<UL>
 <LI style="font-size:10pt; ">
 <P align="left"  style="margin-right:6.50pt;margin-top:4.00pt;margin-bottom:0.00pt;text-align:left;" ><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " >Visual C++ sometimes decorates exported </SPAN><SPAN face="Courier"  style="font-family:'Courier'; font-size:9pt; " >__stdcall</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > functions</SPAN></P></LI>
 <LI style="font-size:10pt; ">
 <P align="left"  style="margin-right:6.50pt;margin-top:4.00pt;margin-bottom:0.00pt;text-align:left;" ><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " >Borland C++Builder expects imported </SPAN><SPAN face="Courier"  style="font-family:'Courier'; font-size:9pt; " >__cdecl</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > functions to be decorated</SPAN></P></LI>
</UL>
<P align="left"  style="margin-left:5.75pt;margin-right:6.50pt;margin-top:4.00pt;margin-bottom:0.00pt;text-align:left;" >&nbsp;</P>
<P align="left"  style="margin-left:5.75pt;margin-right:6.50pt;margin-top:4.00pt;margin-bottom:0.00pt;text-align:left;" ><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " >So why is this such a big deal? Take the first point above. Let’s say you have a </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >DLL</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > created with Visual C++ and that the </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >DLL</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > contains a </SPAN><SPAN face="Courier"  style="font-family:'Courier'; font-size:9pt; " >__stdcall</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > function called </SPAN><SPAN face="Courier"  style="font-family:'Courier'; font-size:9pt; " >MyFunction()</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " >. Visual C++ will give the function a linker name of</SPAN><SPAN face="Courier"  style="font-family:'Courier'; font-size:9pt; " > _MyFunction@4</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " >. When the Borland linker tries to resolve calls made to this function, however, it expects to find a function with the name </SPAN><SPAN face="Courier"  style="font-family:'Courier'; font-size:9pt; " >MyFunction</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " >. Since the import library for the Visual C++ </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >DLL</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > doesn’t contain a function called </SPAN><SPAN face="Courier"  style="font-family:'Courier'; font-size:9pt; " >MyFunction</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " >, the Borland linker generates an “unresolved external” linker error. Basically, the linker couldn’t find the function in the import library so it generates the error. </SPAN></P>
<P align="left"  style="margin-left:5.75pt;margin-right:6.50pt;margin-top:4.00pt;margin-bottom:0.00pt;text-align:left;" ><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " >Your strategy for overcoming these problems will depend on how the Visual C++ </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >DLL</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > was compiled. I have broken the process into four steps. </SPAN></P>
<P align="left"  style="margin-left:5.75pt;margin-right:6.50pt;margin-top:4.00pt;margin-bottom:0.00pt;text-align:left;" >&nbsp;</P>
<H2 align="left"  style="font-size:12pt;margin-left:5.75pt;margin-right:6.50pt;margin-top:6.00pt;margin-bottom:2.00pt;text-align:left;" ><B><SPAN face="Arial"  style="font-family:'Arial'; font-size:8pt; font-weight:bold; " >Step 1: Identify the calling conventions</SPAN></B></H2>
<P align="left"  style="margin-left:5.75pt;margin-right:6.50pt;margin-top:4.00pt;margin-bottom:0.00pt;text-align:left;" ><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " >In order to combat the naming convention entanglements, you must first determine what calling conventions are used by functions in the </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >DLL</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " >. You can do this by investigating the header file for the </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >DLL</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " >. The function prototypes in the </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >DLL</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > header should look something like this: </SPAN></P>
<pre>__declspec(dllimport) void &lt;convention&gt;
  MyFunction(int nArg);</pre>
<P align="left"  style="margin-left:5.75pt;margin-right:6.50pt;margin-top:4.00pt;margin-bottom:0.00pt;text-align:left;" ><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " >The placeholder </SPAN><SPAN face="Courier"  style="font-family:'Courier'; font-size:9pt; " >convention</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > will usually be </SPAN><SPAN face="Courier"  style="font-family:'Courier'; font-size:9pt; " >__stdcall</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > or </SPAN><SPAN face="Courier"  style="font-family:'Courier'; font-size:9pt; " >__cdecl</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > (see </SPAN><B><SPAN face="Arial" color=fuchsia  style="font-family:'Arial'; font-size:10pt; color:fuchsia; font-weight:bold; " >Listing A</SPAN></B><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > for concrete examples). In many cases, the calling convention won’t be specified, in which case it defaults to </SPAN><SPAN face="Courier"  style="font-family:'Courier'; font-size:9pt; " >__cdecl</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " >. </SPAN></P>
<P align="left"  style="margin-left:5.75pt;margin-right:6.50pt;margin-top:4.00pt;margin-bottom:0.00pt;text-align:left;" >&nbsp;</P>
<P align="left"  style="margin-left:5.75pt;margin-top:4.00pt;margin-bottom:2.00pt;text-align:left;" ><B><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; font-weight:bold; letter-spacing:0.25pt;" >Step 2: Examine the linker names in the </SPAN></B><B><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; font-weight:bold; letter-spacing:0.25pt;" >DLL</SPAN></B><B><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; font-weight:bold; letter-spacing:0.25pt;" > </SPAN></B></P>
<P align="left"  style="margin-left:5.75pt;margin-right:6.50pt;margin-top:4.00pt;margin-bottom:0.00pt;text-align:left;" ><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " >If Step 1 reveals that the </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >DLL</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > utilizes the </SPAN><SPAN face="Courier"  style="font-family:'Courier'; font-size:9pt; " >__stdcall</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > calling convention, you will need to examine the </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >DLL</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > to determine the naming convention used when the </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >DLL</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > was built. Visual C++ decorates </SPAN><SPAN face="Courier"  style="font-family:'Courier'; font-size:9pt; " >__stdcall</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > functions by default, but the </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >DLL</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > programmer can prohibit name decorations if he or she adds a </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >DEF </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " >file to the project. Your work will be slightly more tedious if the </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >DLL </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " >supplier did not use a </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >DEF</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > file. </SPAN></P>
<P align="left"  style="margin-left:5.75pt;margin-right:6.50pt;margin-top:4.00pt;margin-bottom:0.00pt;text-align:left;" ><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " >The </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:8pt; " >TDUMP </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " >command line utility allows you to examine the linker names of functions exported by the </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >DLL</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " >. The following command invokes </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:8pt; " >TDUMP</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " > </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " >on a </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >DLL</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " >. </SPAN></P>
<pre>TDUMP -ee MYDLL.DLL &gt; MYDLL.TXT</pre>
<P align="left"  style="margin-left:5.75pt;margin-right:6.50pt;margin-top:4.00pt;margin-bottom:0.00pt;text-align:left;" ><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >TDUMP</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > can report a ton of information about the </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >DLL</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " >. We’re only interested in functions exported by the </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >DLL</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " >, so the </SPAN><SPAN face="Courier"  style="font-family:'Courier'; font-size:9pt; " >-ee</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > switch is used to instruct </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >TDUMP</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > to list only export information. If the </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >DLL</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > is large, you may want to redirect the output of </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >TDUMP</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > to a text file as shown in the previous example. </SPAN></P>
<P align="left"  style="margin-left:5.75pt;margin-right:6.50pt;margin-top:4.00pt;margin-bottom:0.00pt;text-align:left;" ><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " >The </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >TDUMP </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " >output for the test </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >DLL</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > in </SPAN><B><SPAN face="Arial" color=fuchsia  style="font-family:'Arial'; font-size:10pt; color:fuchsia; font-weight:bold; " >Listings A</SPAN></B><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > and </SPAN><B><SPAN face="Arial" color=fuchsia  style="font-family:'Arial'; font-size:10pt; color:fuchsia; font-weight:bold; " >B</SPAN></B><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > looks like this: </SPAN></P>
<pre>Turbo Dump  Version 5.0.16.4 Copyright 
(c) 1988, 1998 Borland International

Display of File DLL.DLL

EXPORT ord:0000='CdeclFunction'
EXPORT ord:0002='UnknownFunction'
EXPORT ord:0001='_StdCallFunction@4'</pre>
<P align="left"  style="margin-left:5.75pt;margin-right:6.50pt;margin-top:4.00pt;margin-bottom:0.00pt;text-align:left;" ><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " >Notice the leading underscore and the trailing </SPAN><SPAN face="Courier"  style="font-family:'Courier'; font-size:9pt; " >@4</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > on the</SPAN><SPAN face="Courier"  style="font-family:'Courier'; font-size:9pt; " > __stdcall</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > function. The </SPAN><SPAN face="Courier"  style="font-family:'Courier'; font-size:9pt; " >__cdecl</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > and the unknown function don’t contain any decorations. If the Visual C++ </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >DLL</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > had been compiled with a </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >DEF</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > file, the decorations on the </SPAN><SPAN face="Courier"  style="font-family:'Courier'; font-size:9pt; " >__stdcall</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > function would not be present. </SPAN></P>
<P align="left"  style="margin-left:5.75pt;margin-right:6.50pt;margin-top:4.00pt;margin-bottom:0.00pt;text-align:left;" >&nbsp;</P>
<P align="left"  style="margin-left:5.75pt;margin-top:4.00pt;margin-bottom:2.00pt;text-align:left;" ><B><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; font-weight:bold; letter-spacing:0.25pt;" >Step 3: Generate an import library for the Visual C++ </SPAN></B><B><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; font-weight:bold; letter-spacing:0.25pt;" >DLL</SPAN></B><B><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; font-weight:bold; letter-spacing:0.25pt;" > </SPAN></B></P>
<P align="left"  style="margin-left:5.75pt;margin-right:6.50pt;margin-top:4.00pt;margin-bottom:0.00pt;text-align:left;" ><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " >Now we get to the hard part. Due to the library file format differences between C++Builder and Visual C++, you cannot add an import library created with Visual C++ to your C++Builder project. You must create an </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >OMF </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " >import library using the command line tools that come with C++Builder. Depending out what you found in the first two steps, this step will either go smoothly, or it could take some time. </SPAN></P>
<P align="left"  style="margin-left:5.75pt;margin-right:6.50pt;margin-top:4.00pt;margin-bottom:0.00pt;text-align:left;" ><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " >As stated earlier, C++Builder and Visual C++ don’t agree on how functions should be named in a </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >DLL</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " >. Due to naming convention differences, you will need to create an aliased import library if the </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >DLL</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > implements calling conventions in which C++Builder and Visual C++ disagree. </SPAN><B><SPAN face="Arial" color=fuchsia  style="font-family:'Arial'; font-size:10pt; color:fuchsia; font-weight:bold; " >Table A</SPAN></B><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > lists the areas of disagreement. </SPAN></P>
<P align="left"  style="margin-left:5.75pt;margin-right:6.50pt;margin-top:4.00pt;margin-bottom:0.00pt;text-align:left;" >&nbsp;</P>
<P align="left"  style="margin-left:5.75pt;margin-top:4.00pt;margin-bottom:0.00pt;text-align:left;" ><SPAN face="Arial" color=fuchsia  style="font-family:'Arial'; font-size:11pt; color:fuchsia; " >Table A:</SPAN><I><SPAN face="Arial" color=fuchsia  style="font-family:'Arial'; font-size:9pt; color:fuchsia; font-style:italic; " > Visual C++ and C++Builder naming conventions</SPAN></I></P>
<P align="left"  style="margin-left:5.75pt;margin-right:6.50pt;margin-top:4.00pt;margin-bottom:0.00pt;text-align:left;" >&nbsp;</P>
<TABLE width="474" cellspacing="0" cellpadding="1" style="border-top:0.50pt solid black; border-bottom:0.50pt solid black; border-left:0.50pt solid black; border-right:0.50pt solid black; " border="1">
 <TR valign=top>
 <TD width="120" style="border-top:0.50pt solid black; border-bottom:0.50pt solid black; border-left:0.50pt solid black; border-right:0.50pt solid black; ">
 <P align="left"  style="margin-left:5.75pt;margin-top:4.00pt;margin-bottom:0.00pt;text-align:left;" ><B><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; font-weight:bold; " >Calling convention</SPAN></B></P></TD>
 <TD width="108" style="border-top:0.50pt solid black; border-bottom:0.50pt solid black; border-left:0.50pt solid black; border-right:0.50pt solid black; ">
 <P align="left"  style="margin-left:5.75pt;margin-top:4.00pt;margin-bottom:0.00pt;text-align:left;" ><B><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; font-weight:bold; " >VC++ name</SPAN></B></P></TD>
 <TD width="120" style="border-top:0.50pt solid black; border-bottom:0.50pt solid black; border-left:0.50pt solid black; border-right:0.50pt solid black; ">
 <P align="left"  style="margin-left:5.75pt;margin-top:4.00pt;margin-bottom:0.00pt;text-align:left;" ><B><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; font-weight:bold; " >VC++ (</SPAN></B><B><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; font-weight:bold; " >DEF</SPAN></B><B><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; font-weight:bold; " > used)</SPAN></B></P></TD>
 <TD width="126" style="border-top:0.50pt solid black; border-bottom:0.50pt solid black; border-left:0.50pt solid black; border-right:0.50pt solid black; ">
 <P align="left"  style="margin-left:5.75pt;margin-top:4.00pt;margin-bottom:0.00pt;text-align:left;" ><B><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; font-weight:bold; " >C++Builder Name</SPAN></B></P></TD></TR>
 <TR valign=top>
 <TD width="120" style="border-top:0.50pt solid black; border-bottom:0.50pt solid black; border-left:0.50pt solid black; border-right:0.50pt solid black; ">
 <P align="left"  style="margin-left:5.75pt;margin-top:4.00pt;margin-bottom:0.00pt;text-align:left;" ><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " >__stdcall</SPAN></P></TD>
 <TD width="108" style="border-top:0.50pt solid black; border-bottom:0.50pt solid black; border-left:0.50pt solid black; border-right:0.50pt solid black; ">
 <P align="left"  style="margin-left:5.75pt;margin-top:4.00pt;margin-bottom:0.00pt;text-align:left;" ><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " >_MyFunction@4</SPAN></P></TD>
 <TD width="120" style="border-top:0.50pt solid black; border-bottom:0.50pt solid black; border-left:0.50pt solid black; border-right:0.50pt solid black; ">
 <P align="left"  style="margin-left:5.75pt;margin-top:4.00pt;margin-bottom:0.00pt;text-align:left;" ><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " >MyFunction</SPAN></P></TD>
 <TD width="126" style="border-top:0.50pt solid black; border-bottom:0.50pt solid black; border-left:0.50pt solid black; border-right:0.50pt solid black; ">
 <P align="left"  style="margin-left:5.75pt;margin-top:4.00pt;margin-bottom:0.00pt;text-align:left;" ><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " >MyFunction</SPAN></P></TD></TR>
 <TR valign=top>
 <TD width="120" style="border-top:0.50pt solid black; border-bottom:0.50pt solid black; border-left:0.50pt solid black; border-right:0.50pt solid black; ">
 <P align="left"  style="margin-left:5.75pt;margin-top:4.00pt;margin-bottom:0.00pt;text-align:left;" ><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " >__cdecl</SPAN></P></TD>
 <TD width="108" style="border-top:0.50pt solid black; border-bottom:0.50pt solid black; border-left:0.50pt solid black; border-right:0.50pt solid black; ">
 <P align="left"  style="margin-left:5.75pt;margin-top:4.00pt;margin-bottom:0.00pt;text-align:left;" ><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " >MyFunction</SPAN></P></TD>
 <TD width="120" style="border-top:0.50pt solid black; border-bottom:0.50pt solid black; border-left:0.50pt solid black; border-right:0.50pt solid black; ">
 <P align="left"  style="margin-left:5.75pt;margin-top:4.00pt;margin-bottom:0.00pt;text-align:left;" ><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " >MyFunction</SPAN></P></TD>
 <TD width="126" style="border-top:0.50pt solid black; border-bottom:0.50pt solid black; border-left:0.50pt solid black; border-right:0.50pt solid black; ">
 <P align="left"  style="margin-left:5.75pt;margin-top:4.00pt;margin-bottom:0.00pt;text-align:left;" ><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " >_MyFunction</SPAN></P></TD></TR>
</TABLE>
<P align="left"  style="margin-left:5.75pt;margin-top:4.00pt;margin-bottom:0.00pt;text-align:left;" >&nbsp;</P>
<P align="left"  style="margin-left:5.75pt;margin-right:6.50pt;margin-top:4.00pt;margin-bottom:0.00pt;text-align:left;" >&nbsp;</P>
<P align="left"  style="margin-left:5.75pt;margin-right:6.50pt;margin-top:4.00pt;margin-bottom:0.00pt;text-align:left;" ><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " >The C++Builder column lists function names that the Borland linker expects to see. The first Visual C++ column lists the linker names that Visual C++ generates when the Visual C++ project does not utilize a </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >DEF </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " >file. The second Visual C++ column contains linker names that Visual C++ creates when a </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >DEF </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " >file is used. For things to go smoothly, the C++Builder name should agree with the Visual C++ name. Notice that the two products agree in only one place: </SPAN><SPAN face="Courier"  style="font-family:'Courier'; font-size:9pt; " >__stdcall</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > functions where the Visual C++ project contained a </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >DEF </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " >file. For the remaining scenarios, you will need to create an import library that aliases the Visual C++ name to a C++Builder compatible name. </SPAN></P>
<P align="left"  style="margin-left:5.75pt;margin-right:6.50pt;margin-top:4.00pt;margin-bottom:0.00pt;text-align:left;" ><B><SPAN face="Arial" color=fuchsia  style="font-family:'Arial'; font-size:10pt; color:fuchsia; font-weight:bold; " >Table A</SPAN></B><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > shows that there are several combinations that you may need to deal with when creating the import library. I have separated the combinations into two cases. </SPAN></P>
<P align="left"  style="margin-left:5.75pt;margin-right:6.50pt;margin-top:4.00pt;margin-bottom:0.00pt;text-align:left;" >&nbsp;</P>
<P align="left"  style="margin-left:5.75pt;margin-right:6.50pt;margin-top:4.00pt;margin-bottom:0.00pt;text-align:left;" ><B><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; font-weight:bold; " >Case 1: The </SPAN></B><B><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; font-weight:bold; " >DLL</SPAN></B><B><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; font-weight:bold; " > contains only __stdcall functions and the </SPAN></B><B><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; font-weight:bold; " >DLL</SPAN></B><B><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; font-weight:bold; " > vendor utilized a </SPAN></B><B><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; font-weight:bold; " >DEF</SPAN></B><B><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; font-weight:bold; " > file.</SPAN></B></P>
<P align="left"  style="margin-left:5.75pt;margin-right:6.50pt;margin-top:4.00pt;margin-bottom:0.00pt;text-align:left;" ><B><SPAN face="Arial" color=fuchsia  style="font-family:'Arial'; font-size:10pt; color:fuchsia; font-weight:bold; " >Table A</SPAN></B><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > reveals that Visual C++ and C++Builder agree only when the </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >DLL</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > uses </SPAN><SPAN face="Courier"  style="font-family:'Courier'; font-size:9pt; " >__stdcall</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > functions. Furthermore, the </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >DLL</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > must be compiled with a </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >DEF </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " >file to prevent Visual C++ from decorating the linker names. The header file will tell you if the </SPAN><SPAN face="Courier"  style="font-family:'Courier'; font-size:9pt; " >__stdcall</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > calling convention was used (Step 1), and </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >TDUMP </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " >will reveal whether or not the functions are decorated (Step 2). If the </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >DLL</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > contains </SPAN><SPAN face="Courier"  style="font-family:'Courier'; font-size:9pt; " >__stdcall</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > functions that are not decorated, then Visual C++ and C++Builder agree on how the functions should be named. If that is the case, you can create an import library by simply running </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >IMPLIB</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > on the </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >DLL</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " >. No aliases are needed. </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >IMPLIB</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > works like this: </SPAN></P>
<pre>IMPLIB (output lib name) (source dll)</pre>
<P align="left"  style="margin-left:5.75pt;margin-right:6.50pt;margin-top:4.00pt;margin-bottom:0.00pt;text-align:left;" ><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " >For example:</SPAN></P>
<pre>IMPLIB mydll.lib mydll.dll</pre>
<P align="left"  style="margin-left:5.75pt;margin-right:6.50pt;margin-top:4.00pt;margin-bottom:0.00pt;text-align:left;" ><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " >Once you have created the import library you can move on to step 4.</SPAN></P>
<P align="left"  style="margin-left:5.75pt;margin-right:6.50pt;margin-top:4.00pt;margin-bottom:0.00pt;text-align:left;" >&nbsp;</P>
<P align="left"  style="margin-left:5.75pt;margin-right:6.50pt;margin-top:4.00pt;margin-bottom:0.00pt;text-align:left;" ><B><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; font-weight:bold; " >Case 2: The </SPAN></B><B><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; font-weight:bold; " >DLL</SPAN></B><B><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; font-weight:bold; " > contains __cdecl functions or decorated __stdcall functions.</SPAN></B></P>
<P align="left"  style="margin-left:5.75pt;margin-right:6.50pt;margin-top:4.00pt;margin-bottom:0.00pt;text-align:left;" ><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " >If your </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >DLL</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > vendor is adamant about creating </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >DLL</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " >s that are compiler independent, then you have a good chance of falling into the Case 1 category. Unfortunately, odds are you won’t fall into the Case 1 group for several reasons. For one, the calling convention defaults to </SPAN><SPAN face="Courier"  style="font-family:'Courier'; font-size:9pt; " >__cdecl</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > if a calling convention was not specified when the </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >DLL</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > was built. Secondly, even if your vendor has utilized the </SPAN><SPAN face="Courier"  style="font-family:'Courier'; font-size:9pt; " >__stdcall</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > calling convention, they probably neglected to utilize a </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >DEF</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > file to strip the Visual C++ name decorations. </SPAN></P>
<P align="left"  style="margin-left:5.75pt;margin-right:6.50pt;margin-top:4.00pt;margin-bottom:0.00pt;text-align:left;" ><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " >However you got here, welcome to Case 2. You’re stuck with a </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >DLL</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > whose function names don’t agree with C++Builder. Your only way out of this mess is to create an import library that aliases the Visual C++ function names into a format compatible with C++Builder. Fortunately, the C++Builder command line tools allow you to create an aliased import library. </SPAN></P>
<P align="left"  style="margin-left:5.75pt;margin-right:6.50pt;margin-top:4.00pt;margin-bottom:0.00pt;text-align:left;" ><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " >The first step is to create a </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >DEF</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > file from the Visual C++ </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >DLL</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > by using the </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >IMPDEF</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > utility that comes with C++Builder. </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >IMPDEF</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > creates a </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >DEF</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > file that lists all of the functions exported by the </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >DLL</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " >. You invoke </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >IMPDEF</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > like this: </SPAN></P>
<pre>IMPDEF (output DEF file) (source DLL)</pre>
<P align="left"  style="margin-left:5.75pt;margin-right:6.50pt;margin-top:4.00pt;margin-bottom:0.00pt;text-align:left;" ><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " >For example:</SPAN></P>
<pre>IMPDEF mydll.def mydll.dll</pre>
<P align="left"  style="margin-left:5.75pt;margin-right:6.50pt;margin-top:4.00pt;margin-bottom:0.00pt;text-align:left;" ><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " >After running </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >IMPDEF</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " >, open the resulting </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >DEF</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > file using the editor of your choice. When the </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >DLL</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > shown in </SPAN><B><SPAN face="Arial" color=fuchsia  style="font-family:'Arial'; font-size:10pt; color:fuchsia; font-weight:bold; " >Listings A</SPAN></B><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > and </SPAN><B><SPAN face="Arial" color=fuchsia  style="font-family:'Arial'; font-size:10pt; color:fuchsia; font-weight:bold; " >B</SPAN></B><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > is compiled with Visual C++, the </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >DEF</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > file created by </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >IMPDEF</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > looks like this: </SPAN></P>
<pre>LIBRARY     DLL.DLL

EXPORTS
 CdeclFunction @1
 UnknownFunction @3
 _StdCallFunction@4 =_StdCallFunction @2</pre>
<P align="left"  style="margin-left:5.75pt;margin-right:6.50pt;margin-top:4.00pt;margin-bottom:0.00pt;text-align:left;" ><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " >The next step is to alter the </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >DEF</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > file so it aliases the </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >DLL</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > functions into names that C++Builder will like. You can alias a function by listing a C++Builder compatible name followed by the original Visual C++ linker name. For the test </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >DLL</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > the aliased </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >DEF</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > looks like this: </SPAN></P>
<pre>EXPORTS
 ; use this type of aliasing
 ; (Borland name) = 
    (Name exported by Visual C++)
 _CdeclFunction   = CdeclFunction
 _UnknownFunction = UnknownFunction
 StdCallFunction  = _StdCallFunction@4</pre>
<P align="left"  style="margin-left:5.75pt;margin-right:6.50pt;margin-top:4.00pt;margin-bottom:0.00pt;text-align:left;" ><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " >Notice that the function names on the left match the Borland compatible names from </SPAN><B><SPAN face="Arial" color=fuchsia  style="font-family:'Arial'; font-size:10pt; color:fuchsia; font-weight:bold; " >Table A</SPAN></B><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " >. The function names on the right are the actual linker names of the functions in the Visual C++ </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >DLL</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " >. </SPAN></P>
<P align="left"  style="margin-left:5.75pt;margin-right:6.50pt;margin-top:4.00pt;margin-bottom:0.00pt;text-align:left;" ><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " >The final step is to create an aliased import library from the aliased </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >DEF</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > file. Once again, you rely on the </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >IMPLIB </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " >utility, except that this time, you pass </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >IMPLIB </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " >the aliased </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >DEF</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > file as its source file instead of the original </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >DLL</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " >. The format is:</SPAN></P>
<pre>IMPLIB (dest lib file) (source def file)</pre>
<P align="left"  style="margin-left:5.75pt;margin-right:6.50pt;margin-top:4.00pt;margin-bottom:0.00pt;text-align:left;" ><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " >For example:</SPAN></P>
<pre>IMPLIB mydll.lib mydll.def</pre>
<P align="left"  style="margin-left:5.75pt;margin-right:6.50pt;margin-top:4.00pt;margin-bottom:0.00pt;text-align:left;" >&nbsp;</P>
<P align="left"  style="margin-left:5.75pt;margin-right:6.50pt;margin-top:4.00pt;margin-bottom:0.00pt;text-align:left;" ><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " >Before going on to Step 4 you may want to examine the import library first to ensure that each </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >DLL</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > function appears in a naming format that C++Builder agrees with. You can use the </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >TLIB </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " >utility to inspect the import library. </SPAN></P>
<pre>TLIB mydll.lib, mydll.lst</pre>
<P align="left"  style="margin-left:5.75pt;margin-right:6.50pt;margin-top:4.00pt;margin-bottom:0.00pt;text-align:left;" ><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " >The list file for the test </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >DLL</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > looks like this: </SPAN></P>
<pre>Publics by module

StdCallFunction size = 0
        StdCallFunction

_CdeclFunction  size = 0
        _CdeclFunction

_UnknownFunction size = 0
        _UnknownFunction</pre>
<P align="left"  style="margin-left:5.75pt;margin-top:4.00pt;margin-bottom:2.00pt;text-align:left;" ><B><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; font-weight:bold; letter-spacing:0.25pt;" >Step 4: Add the import library to your project </SPAN></B></P>
<P align="left"  style="margin-left:5.75pt;margin-right:6.50pt;margin-top:4.00pt;margin-bottom:0.00pt;text-align:left;" ><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " >Once you have created an import library for the Visual C++ </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >DLL</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " >, you can add the import library to your C++Builder project. You use the import library without regard to whether the import library contains aliases or not. After adding the import library to your project, build the project and see if you can successfully link. </SPAN></P>
<P align="left"  style="margin-left:5.75pt;margin-right:6.50pt;margin-top:4.00pt;margin-bottom:0.00pt;text-align:left;" >&nbsp;</P>
<P align="left"  style="margin-left:5.75pt;margin-top:4.00pt;margin-bottom:2.00pt;text-align:left;" ><SPAN face="Arial"  style="font-family:'Arial'; font-size:14pt; letter-spacing:0.25pt;" >Conclusion</SPAN></P>
<P align="left"  style="margin-left:5.75pt;margin-right:6.50pt;margin-top:4.00pt;margin-bottom:0.00pt;text-align:left;" ><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " >You may have noticed that this article only discusses how to call C style functions in a </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >DLL</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " >. No attempt is made to call methods of an object where the code for the class resides in a Visual C++ </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >DLL</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " >. </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >DLL</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " >s containing C++ classes present an even greater array of problems because linker names for member functions are mangled. The compiler employs a name-mangling scheme in order to support function overloading. Unfortunately, the C++ standard does not specify how a compiler should mangle class method names. Without a strict standard in place, Borland and Microsoft have each developed their own techniques for name mangling, and the two conventions are not compatible. In theory, you could use the same aliasing technique to call member functions of a class that resides in a </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >DLL</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " >. However, you may want to consider creating a COM object instead. COM introduces many of its own problems, but it does enforce a standard way of calling methods of an object. A COM object created by Visual C++ can be called from any development environment, including both Delphi and C++Builder. </SPAN></P>
<P align="left"  style="margin-left:5.75pt;margin-right:6.50pt;margin-top:4.00pt;margin-bottom:0.00pt;text-align:left;" ><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " >C++Builder 3.0 introduced a new command line utility called </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >COFFToOMF.EXE</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " >. This utility can convert a Visual C++ import library to a C++Builder import library. Furthermore, the program automatically aliases </SPAN><SPAN face="Courier"  style="font-family:'Courier'; font-size:9pt; " >__cdecl</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > functions from the Visual C++ format to the C++Builder format. The automatic aliasing can simplify Step 3 if the </SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:9pt; " >DLL</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > uses the </SPAN><SPAN face="Courier"  style="font-family:'Courier'; font-size:9pt; " >__cdecl</SPAN><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > calling convention exclusively. </SPAN></P>
<P align="left"  style="margin-left:5.75pt;margin-right:6.50pt;margin-top:4.00pt;margin-bottom:0.00pt;text-align:left;" ><SPAN face="Arial"  style="font-family:'Arial'; font-size:10pt; " > </SPAN></P>
<P align="left"  style="margin-left:5.75pt;margin-right:6.50pt;margin-top:4.00pt;margin-bottom:0.00pt;text-align:left;line-height:12.00pt;" ><SPAN face="Arial" color=fuchsia  style="font-family:'Arial'; font-size:11pt; color:fuchsia; " >Listing A: </SPAN><I><SPAN face="Times Roman" color=fuchsia  style="font-family:'Times Roman'; font-size:9pt; color:fuchsia; font-style:italic; " >DLL.H</SPAN></I></P>
<pre>#ifdef __cplusplus
extern &quot;C&quot; {
#endif

#ifdef _BUILD_DLL_
#define FUNCTION __declspec(dllexport)
#else
#define FUNCTION __declspec(dllimport)
#endif

FUNCTION int __stdcall StdCallFunction(int Value);
FUNCTION int __cdecl CdeclFunction  (int Value);
FUNCTION int UnknownFunction(int Value);

#ifdef __cplusplus
}
#endif</pre>
<P align="left"  style="margin-left:5.75pt;margin-right:6.50pt;margin-top:4.00pt;margin-bottom:0.00pt;text-align:left;" >&nbsp;</P>
<P align="left"  style="margin-left:5.75pt;margin-right:6.50pt;margin-top:4.00pt;margin-bottom:0.00pt;text-align:left;line-height:12.00pt;" ><SPAN face="Arial" color=fuchsia  style="font-family:'Arial'; font-size:11pt; color:fuchsia; " >Listing B: </SPAN><I><SPAN face="Times Roman" color=fuchsia  style="font-family:'Times Roman'; font-size:9pt; color:fuchsia; font-style:italic; " >DLL.C</SPAN></I></P>
<pre>#define _BUILD_DLL_
#include &quot;dll.h&quot;

FUNCTION int __stdcall StdCallFunction(int Value)
{
  return Value + 1;
}

FUNCTION int __cdecl   CdeclFunction(int Value)
{
  return Value + 2;
}

FUNCTION int UnknownFunction(int Value)
{
  return Value;
}</pre>
<P align="left"  style="margin-left:5.75pt;margin-right:6.50pt;margin-top:4.00pt;margin-bottom:0.00pt;text-align:left;" >&nbsp;</P>
<P align="left"  style="margin-left:5.75pt;margin-right:6.50pt;margin-top:4.00pt;margin-bottom:0.00pt;text-align:left;line-height:12.00pt;" ><SPAN face="Arial" color=fuchsia  style="font-family:'Arial'; font-size:11pt; color:fuchsia; " >Listing C: </SPAN><I><SPAN face="Times Roman" color=fuchsia  style="font-family:'Times Roman'; font-size:9pt; color:fuchsia; font-style:italic; " >MAINFORM.CPP - DLLTest program</SPAN></I></P>
<pre>#include &lt;vcl\vcl.h&gt;
#pragma hdrstop

#include &quot;MAINFORM.h&quot;
#include &quot;dll.h&quot;

#pragma resource &quot;*.dfm&quot;
TForm1 *Form1;

__fastcall TForm1::TForm1(TComponent* Owner)
  : TForm(Owner)
{
}

void __fastcall 
  TForm1::Button1Click(TObject *Sender)
{
  int Value = StrToInt(Edit1-&gt;Text);
  int Result= StdCallFunction(Value);
  ResultLabel-&gt;Caption = IntToStr(Result);
}

void __fastcall 
  TForm1::Button2Click(TObject *Sender)
{
  int Value = StrToInt(Edit1-&gt;Text);
  int Result= CdeclFunction(Value);
  ResultLabel-&gt;Caption = IntToStr(Result);
}

void __fastcall 
  TForm1::Button3Click(TObject *Sender)
{
  int Value = StrToInt(Edit1-&gt;Text);
  int Result= UnknownFunction(Value);
  ResultLabel-&gt;Caption = IntToStr(Result);
}</pre>
<!--#include virtual="/pagefooter.html"-->
</BODY>
</HTML>
