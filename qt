install::
        wget https://download.qt.io/archive/qt/5.14/5.14.2/qt-opensource-linux-x64-5.14.2.run
        ./qt-opensource-linux-x64-5.14.2.run
    configure paths, 
        pathaddmul "/opt/Qt/5.15.2/gcc_64/bin/"
        pathaddmul "/opt/Qt/Tools/QtCreator/bin/"
        pathaddmul "/opt/Qt/5.15.2/gcc_64/lib/" LD_LIBRARY_PATH
deploy::
publish::
:: deploying a qt5 application Linux
    + methods,
      . distribution packages
      . standalone application bundle
      . installer
      . static build, not support plugin

    + refer to:
        https://wiki.qt.io/Deploying_a_Qt5_Application_Linux
        https://doc.qt.io/qt-6/linux-deployment.html

    + how to:
    
    + build ubuntu 18.04 (bionic) environment 
    
    + download linuxqtdeploy imagage

    + compile execute by rlease mode
        cmake .. -DCMAKE_BUILD_TYPE=Release
    + deploy file system
      . mkdir deploy directory by
            mkdir deploy
            cd deploy
      . cp binary into deploy
            cp ../build/qreg .
      . create desktop file and icon, so at least three files in deploy 
         . qreg, binary 
         . qreg.png, icon
         . qreg.desktop desktop file
      . desktop file example 
--------------------------------------------------------------------------------
            [Desktop Entry]
            Type=Application
            Name=qreg
            Comment=Qt deploy example
            Exec=qreg
            Icon=qreg
--------------------------------------------------------------------------------
    + deploy, by
        ../../../linuxdeployqt-continuous-x86_64.AppImage qreg --extract-info-and-run -verbose=2 -appimage
    options of "--extract-info-and-run" "-verbose=2" both are necessary, othersize qtdeploy does not work

>>>>>>> aca144d99be740748e0e153dcee45ec7d94a4e13
refer::
    https://doc.qt.io/qt-5/configure-options.html

build::

    + install python/ruby/perl, according to README file, make sure them added
to path, check in cmd.
    + run "x64 Native tools command prompt for VS 2019"
    + configure by 
        configure -prefix C:\Qt\ -mp -debug-and-release -opensource -force-debug-info -opengl dynamic  -nomake examples -nomake tests -skip coin -skip qtactiveqt -skip qtandroidextras -skip qtconnectivity -skip qtmacextras -skip qtmultimedia -skip qtpurchasing -skip qtscript -skip qtscxml -skip qtsensors -skip qtserialbus -skip qtserialport -skip qtspeech -skip qtwayland -skip  qtwebchannel -skip qtwebglplugin -skip qtwebengine -skip qtx11extras -skip qtgamepad -skip qtlocation -skip qtserialbus
    + nmake (4-cores about 10 hours)
    + nmake install (about one hour)

build in x86 support
    + run "x86 Native tools command prompt for VS 2019"
    + install python/ruby/perl, according to README file, make sure them added
to path, check in cmd.
    + create build path
    + cd build path
    + available platform, find in qtbase\mkspecs directory
		In linux, clang or g++ toolchain are supported
			./configure -platform linux-clang  #clang
			./configure -platform linux-g++    #g++
			./configure -platform linux-g++-32
		In windows, mingw32 or vs toolchain are supported
			configure.bat -platform win32-g++  
			configure.bat -platform win32-msvc
    + configure by 
      ..\qt-everywhere-src-5.15.2\configure -prefix C:\Qt\Qt5.15.2\qt-5.15.2-winrt-x86-msvc2019 -mp -platform win32-msvc -opensource -debug -debug-and-release -force-debug-info -opengl dynamic -nomake examples -nomake tests -skip qtactiveqt -skip qtandroidextras -skip qtconnectivity -skip qtmacextras -skip qtmultimedia -skip qtpurchasing -skip qtscript -skip qtscxml -skip qtsensors -skip qtserialbus -skip qtserialport -skip qtspeech -skip qtwayland -skip qtwebchannel -skip qtwebglplugin -skip qtwebengine -skip qtx11extras -skip qtgamepad -skip qtlocation -skip qtserialbus

 
    + nmake
    + nmake install

    or alternatively by jom (https://wiki.qt.io/Jom)
    + jom /W /S -j4
    + jom install


:: build from git in Debian
    + source reporosity
        https://download.qt.io/archive/qt/

